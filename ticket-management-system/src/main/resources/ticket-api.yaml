openapi: 3.0.3
info:
  title: Ticket Management System API
  version: 1.0.0
  description: API for managing tickets
servers:
  - url: /api
tags:
  - name: auth
    description: Authentication operations
  - name: ticket
    description: Ticket management
  - name: user
    description: User management
paths:
  /1.0/auth/login:
    post:
      summary: Authenticate user
      operationId: loginUser
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
        '401':
          description: Authentication failed

  /1.0/tickets:
    post:
      summary: Create a new ticket
      operationId: createTicket
      tags:
        - ticket
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketRequest'
      responses:
        '201':
          description: Ticket created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketResponse'
        '401':
          description: Unauthorized
    get:
      summary: Get all tickets
      operationId: getAllTickets
      tags:
        - ticket
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of tickets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TicketResponse'
        '401':
          description: Unauthorized

  /1.0/tickets/{id}:
    get:
      summary: Get a ticket by ID
      operationId: getTicketById
      tags:
        - ticket
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Ticket found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketResponse'
        '404':
          description: Ticket not found
        '401':
          description: Unauthorized

    put:
      summary: Update a ticket
      operationId: updateTicket
      tags:
        - ticket
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketRequest'
      responses:
        '200':
          description: Ticket updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketResponse'
        '404':
          description: Ticket not found
        '401':
          description: Unauthorized

    delete:
      summary: Delete a ticket
      operationId: deleteTicket
      tags:
        - ticket
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Ticket deleted successfully
        '404':
          description: Ticket not found
        '401':
          description: Unauthorized

  /1.0/tickets/{id}/assign/{userId}:
    put:
      summary: Assign a ticket to a user
      operationId: assignTicket
      tags:
        - ticket
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Ticket assigned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketResponse'
        '404':
          description: Ticket or User not found
        '401':
          description: Unauthorized

  /1.0/users:
    post:
      summary: Create a new user
      operationId: createUser
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
    get:
      summary: Get all users
      operationId: getAllUsers
      tags:
        - user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized

  /1.0/users/{id}:
    get:
      summary: Get a user by ID
      operationId: getUserById
      tags:
        - user
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
        '401':
          description: Unauthorized

    put:
      summary: Update a user
      operationId: updateUser
      tags:
        - user
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
        '401':
          description: Unauthorized

    delete:
      summary: Delete a user
      operationId: deleteUser
      tags:
        - user
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
        '401':
          description: Unauthorized

  /1.0/users/{id}/tickets:
    get:
      summary: Get tickets assigned to a user
      operationId: getUserTickets
      tags:
        - user
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: List of tickets assigned to the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TicketResponse'
        '404':
          description: User not found
        '401':
          description: Unauthorized

components:
  schemas:
    AuthenticationRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password

    AuthenticationResponse:
      type: object
      properties:
        jwt:
          type: string
          description: JWT token for authenticated user

    TicketRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [IN_PROGRESS, COMPLETED, CANCELLED]
        assignedUserId:
          type: integer
          format: int64

    TicketResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [IN_PROGRESS, COMPLETED, CANCELLED]
        assignedUser:
          $ref: '#/components/schemas/UserResponse'

    UserRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
      required:
        - username
        - email
        - password

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []